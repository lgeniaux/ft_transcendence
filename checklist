"Your website must be a single-page application. The user should be able to use the
Back and Forward buttons of the browser."
    - Check back and forward maximum cases


"The user should encounter no unhandled errors and no warnings when browsing the
website."
    - try catch in the api to prevent 500 errors


"Everything must be launched with a single command line to run an autonomous
container provided by Docker . Example : docker-compose up --build"
    - Add Dockerfiles
    
"When your computers in clusters run under Linux, you will use Docker
in rootless mode for security reasons. This comes with 2 sideways:
• Your Docker runtime files must be located in /goinfre or
/sgoinfre."

"You can’t use so called “bind-mount volumes” between the host
and the container if non-root UIDs are used in the container."
    - chatgpt wtf is this?

"Therefore, users must have the ability to participate in a live Pong game against
another player directly on the website. Both players will use the same keyboard.
The Remote players module can enhance this functionality with remote players."
    - Local game

"A player must be able to play against another player, but it should also be possible
to propose a tournament."
    - Start tournament button when nb_players joined
    - Add "Play button" to play next tournament game
    - Check and refactor tournament live display
    - Front end - End of game display / tournament bracket

"There must be a matchmaking system: the tournament system organize the
matchmaking of the participants, and announce the next fight."
    - Add clickable status for notification of next game


"Any password stored in your database, if applicable, must be hashed."
    - Done but check

"Your website must be protected against SQL injections/XSS."
"You must implement some form of validation for forms and any user input, either
within the base page if no backend is used or on the server side if a backend is
employed."
    - Explicitly sanitize inputs

"If you have a backend or any other features, it is mandatory to enable an HTTPS
connection for all aspects (Utilize wss instead of ws...)."
    - Nginx config

"Major module: Use a Framework as backend."
    - Refactor Python code

"Minor module: Use a front-end framework or toolkit."
    - Refactor front end code / optimized SPA 

"Major module: Standard user management, authentication, users across tournaments."
    - Users can subscribe to the website in a secure way : done
    - Registered users can log in in a secure way : add "accepted privacy policy" text + avatars file upload checks
    - Users can update their information : redo all test after changing user info
    - Users can upload an avatar, with a default option if none is provided.
    - Users can add others as friends and view their online status : online status
    - Be carefull, the management of duplicate usernames/emails is at your discretion : check for duplicate usernames/emails after delete / modify account
    - Major module: Implementing a remote authentication : check code 

"Major module: Live Chat."
    - Add chat : various tests

"User and Game Stats Dashboards."

"GDPR Compliance Options with User Anonymization, Local
Data Management, and Account Deletion"

"Major module: Implementing Advanced 3D Techniques"
    