./nginx/django.conf
server {
    listen 443 ssl;
    server_name born2pong.dev;

    ssl_certificate /etc/nginx/ssl/born2pong.dev.crt;
    ssl_certificate_key /etc/nginx/ssl/born2pong.dev.key;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        alias /usr/share/nginx/html/static/;
    }
    location /media/ {
        alias /usr/share/nginx/html/media/;
    }

    location / {
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket support
    location /ws/ {
        proxy_pass http://web:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

./frontend/templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My SPA</title>
    <!-- Bootstrap CSS CDN for simplicity, you might want to download and host it yourself for production -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <!-- Your custom CSS -->
    <link rel="stylesheet" href="/static/css/main.css">
</head>
<body>
    <div id="app">
        <!-- Your SPA's content will be injected here by JavaScript -->
    </div>

    <!-- Your main JavaScript file -->
    <script src="/static/js/main.js"></script>
    <!-- Bootstrap JS, Popper.js, and jQuery, all from CDN for simplicity -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
./frontend/templates/authentication/register.html
{% load static %}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Créer un compte</title>
</head>

<body>
    <form id="registerForm" class="authForm">

		<div class="row">
			<h1>Créer un compte</h1>
		</div>

        <div class="row">
			<div class="col-auto">
				<label for="username">Nom d'utilisateur</label>
            	<input type="text" name="username" placeholder="Nom d'utilisateur" class="form-control">
			</div>
        </div>

        <div class="row">
			<div class="col-auto">
				<label for="email">Adresse e-mail</label>
            	<input type="email" name="email" placeholder="Adresse e-mail" class="form-control">
			</div>
        </div>

        <div class="row">
            <div class="col-auto mb-2"> <!-- Ajout de la classe mb-2 pour une marge en bas -->
				<label for="password">Mot de passe</label>
                <input type="password" name="password" placeholder="Mot de passe" class="form-control">
            </div>
            <div class="col-auto">
                <input type="password" name="confirmPassword" placeholder="Confirmer le mot de passe" class="form-control">
            </div>
        </div>

		<div class="row"></div>

        <div class="row justify-content-around">
			<button class="secondaryBtn" id="loginBtn" data-content="{% url 'login' %}" data-script="{% static 'js/auth/login.js' %}" class="btn btn-secondary">Déjà un compte ?</button>
            <button class="primaryBtn" id="registerBtn" type="submit" class="btn btn-primary">Créer le compte</button>
        </div>

    </form>

	<script src="{% static 'js/register.js' %}"></script>

</body>

</html>
./frontend/templates/authentication/login.html
{% load static %}
<form id="loginForm" class="authForm" action="" method="post">
	{% csrf_token %}
	<div class="row">
		<h1>Se connecter</h1>
	</div>

	<div class="row">
		<div class="col-auto">
			<label for="email">Adresse e-mail</label>
			<input type="email" name="email" class="form-control" placeholder="Adresse e-mail">
		</div>
	</div>

	<div class="row">
		<div class="col-auto">
			<label for="password">Mot de passe</label>
			<input type="password" name="password" class="form-control" placeholder="Mot de passe">
		</div>
	</div>

	<div class="row"></div>

	<div class="row justify-content-around">
		<button class="secondaryBtn btn btn-secondary" id="registerBtn" data-content="{% url 'register' %}" data-script="{% static 'js/auth/register.js' %}">Pas encore de compte ?</button>
		<button class="primaryBtn btn btn-primary" id="loginBtn" type="submit">Se connecter</button>
	</div>
</form>

<script src="{% static 'js/login.js' %}"></script>./static/html/home.html
<a id="loginBtn" class="primaryBtn btn btn-primary" href="/login">Se connecter</a>./static/html/login.html
<html>
	<form id="loginForm" class="authForm" action="" method="post">
		{% csrf_token %}
		<div class="row">
			<h1>Se connecter</h1>
		</div>
	
		<div class="row">
			<div class="col-auto">
				<label for="email">Adresse e-mail</label>
				<input type="email" name="email" class="form-control" placeholder="Adresse e-mail">
			</div>
		</div>
	
		<div class="row">
			<div class="col-auto">
				<label for="password">Mot de passe</label>
				<input type="password" name="password" class="form-control" placeholder="Mot de passe">
			</div>
		</div>
	
		<div class="row"></div>
	
		<div class="row justify-content-around">
			<button class="secondaryBtn btn btn-secondary" id="registerBtn" data-content="{% url 'register' %}" data-script="{% static 'js/auth/register.js' %}">Pas encore de compte ?</button>
			<button class="primaryBtn btn btn-primary" id="loginBtn" type="submit">Se connecter</button>
		</div>
	</form>
</html>
./static/js/register.js
// register.js

function checkPassword() {
    var password = document.querySelector('[name="password"]').value;
    var password2 = document.querySelector('[name="confirmPassword"]').value;
    if (password !== password2) {
        console.log('Passwords do not match');
        return false;
    }
    console.log('Passwords match');
    return true;
}

function initRegisterForm() {
    var registerForm = document.getElementById('registerForm');
    if (registerForm) {
        registerForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Prevent default form submission
            if (!checkPassword()) {
                return;
            }
            registerUser();
        });
    }
}

function registerUser() {
    var username = document.querySelector('[name="username"]').value;
    var email = document.querySelector('[name="email"]').value;
    var password = document.querySelector('[name="password"]').value;

    fetch('/api/register-user/', {
        method: 'POST',
        credentials: 'same-origin',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': getCookie('csrftoken')
        },
        body: JSON.stringify({ username: username, email: email, password: password })
    })
    .then(response => response.json())
    .then(data => {
        console.log(data); // for the moment just log in the console
        
    })
    .catch(error => console.error('Error:', error));
}

// CSRF token from cookies
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

window.initializeForm('registerForm', initRegisterForm);
./static/js/login.js
// login.js

// Function to initialize the login form
function initLoginForm() {
    var loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', function(event) {
            event.preventDefault();
            loginUser();
        });
    }
}

function loginUser() {
    var username = document.querySelector('[name="username"]').value;
    var password = document.querySelector('[name="password"]').value;
    const auth_token = localStorage.getItem('authToken');

    const headers = {
        'Content-Type': 'application/json',
        'X-CSRFToken': getCookie('csrftoken')
    };2

    if (auth_token && auth_token !== 'undefined' && auth_token !== 'null') {
        headers['Authorization'] = 'Token ' + auth_token;
    }

    fetch('/api/login-user/', {
        method: 'POST',

        headers: headers,
        body: JSON.stringify({ username: username, password: password })
    })
    .then(response => response.json())
    .then(data => {
        const auth_token = data.auth_token;
        localStorage.setItem('authToken', auth_token);
        console.log(data.message);
        // Note de Louis: Gerer le cas ou le login est bon ou pas
    })
    .catch(error => console.error('Error:', error));
}

// CSRF token from cookies
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}./static/js/router.js
class Router {
    constructor(routes) {
        this.routes = routes;
        this.init();
    }

    init() {
        window.addEventListener('hashchange', () => this.handleHashChange());
        this.handleHashChange(); // Handle the initial load
    }

    async handleHashChange() {
        const hash = location.hash.slice(1); // Remove the '#' part
        const route = this.routes[hash] || this.routes['404'];
        this.loadContent(route);
    }

    async loadContent({templateUrl, scriptUrl, styleUrl}) {
        const contentDiv = document.getElementById('app');

        // Load the HTML template
        const response = await fetch(templateUrl);
        contentDiv.innerHTML = await response.text();

        // // Dynamically load the CSS
        // if (styleUrl) {
        //     const link = document.createElement('link');
        //     link.href = styleUrl;
        //     link.type = 'text/css';
        //     link.rel = 'stylesheet';
        //     document.head.appendChild(link);
        // }

        // Dynamically load the JS
        if (scriptUrl) {
            const script = document.createElement('script');
            script.src = scriptUrl;
            document.body.appendChild(script);
        }
    }
}

const router = new Router({
    'login': {
        templateUrl: 'frontend/templates/authentication/login.html',
        scriptUrl: 'static/js/login.js',
        styleUrl: 'static/css/login.css'
    },
    'register': {
        templateUrl: 'frontend/templates/authentication/register.html',
        scriptUrl: 'static/js/register.js',
        styleUrl: 'static/css/register.css'
    },
    '404': {
        templateUrl: 'frontend/templates/404.html',
    }

});

./static/js/main.js
// main.js

const routes = {
    '/': {
        html: '/static/html/home.html',
    },
    '/login': {
        html: '/static/html/login.html',
        js: '/static/js/login.js'
    }
    // Add more routes as needed
};

document.addEventListener('DOMContentLoaded', function() {
    navigate(window.location.pathname);

    window.addEventListener('popstate', function() {
        navigate(window.location.pathname);
    });
});

function navigate(path) {
    const route = routes[path]; // Get the route object from your "database"
    if (!route) {
        console.error('Route not found');
        return;
    }

    loadHTML(route.html);
    if (route.css)
        loadCSS(route.css);
    if (route.js)
        loadJS(route.js);
}

function loadHTML(url) {
    fetch(url)
        .then(response => response.text())
        .then(html => {
            document.querySelector('#app').innerHTML = html;
        })
        .catch(error => console.error('Error loading the HTML file:', error));
}

function loadCSS(url) {
    const head = document.getElementsByTagName('head')[0];
    const link = document.createElement('link');
    link.rel = 'stylesheet';
    link.type = 'text/css';
    link.href = url;
    head.appendChild(link);
}

function loadJS(url) {
    const script = document.createElement('script');
    script.src = url;
    script.type = 'text/javascript';
    script.async = false; // This ensures the script is executed in the order it was called
    document.body.appendChild(script);
}
./backend/authentication/views.py
from django.shortcuts import render
import os

# Create your views here.
def register_view(request):
    return render(request, 'authentication/register.html')

def login_view(request):
    return render(request, 'authentication/login.html')./backend/authentication/urls.py
from django.contrib import admin
from django.urls import path, include

from .views import register_view, login_view

urlpatterns = [
    path('register/', register_view, name='register-user'),
    path('login/', login_view, name='login-user'),
]
./backend/api/views.py
from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Game
from .serializers import GameSerializer, UserRegistrationSerializer, UserLoginSerializer
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.db import IntegrityError
from rest_framework.permissions import IsAuthenticated
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_protect, csrf_exempt
from rest_framework.authtoken.models import Token
from rest_framework.authentication import TokenAuthentication
# LIST OF ALL API ENDPOINTS

class GameList(APIView):
    """
    List all games
    """
    permission_classes = [IsAuthenticated] #this will make sure that the user is authenticated before accessing the endpoint
    def get(self, request, format=None):
        games = Game.objects.all()
        serializer = GameSerializer(games, many=True)
        return Response(serializer.data)
    
class UserRegistrationView(APIView):
    """
    Register a new user
    """
    def post(self, request, *args, **kwargs):
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid(): #Note de Louis: is_valid will check all functions that starts with validate_*
            user = serializer.save()
            return Response({"message": "User successfully registered"}, status=status.HTTP_201_CREATED)
        else:
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
            
    
class UserLogin(APIView):
    authentication_classes = [TokenAuthentication]
    def post(self, request, *args, **kwargs):
        if request.user.is_authenticated:
            return Response({"detail": "You are already authenticated"}, status=status.HTTP_200_OK)
        serializer = UserLoginSerializer(data=request.data)
        if serializer.is_valid():
            user = authenticate(
                username=serializer.validated_data['username'],
                password=serializer.validated_data['password']
            )
            if user:
                token, created = Token.objects.get_or_create(user=user)
                response = Response({"detail": "Success", "auth_token": token.key}, status=status.HTTP_200_OK)
                return response
            return Response({"detail": "Invalid credentials"}, status=status.HTTP_401_UNAUTHORIZED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        
class UserLogout(APIView):
    authentication_classes = [TokenAuthentication]
    def post(self, request, *args, **kwargs):
        if request.user.is_authenticated:
            request.user.auth_token.delete()
            return Response({"detail": "You have successfuly been logged out"}, status=status.HTTP_200_OK)
        return Response({"detail": "You are not logged in"}, status=status.HTTP_401_UNAUTHORIZED)./backend/api/urls.py
from django.urls import path
from .views import GameList, UserRegistrationView, UserLogin, UserLogout

app_name = 'api'

urlpatterns = [
    path('games/', GameList.as_view(), name='game-list'),
    path('register-user/', UserRegistrationView.as_view(), name='register-user'),
    path('login-user/', UserLogin.as_view(), name='login-user'),
    path('logout-user/', UserLogout.as_view(), name='logout-user'),
]./backend/livechat/templates/livechat/lobby.html
{% load static %}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Live Chat</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <h1>Live Chat</h1>
    
    <form id="form">
        <input type="text" id="message" name="message">
        <button type="submit">Send</button>
    </form>

	<div id="messages"></div>

    <script type="text/javascript">
        let url = "ws://" + window.location.host + "/ws/chat/testroom/";
        const chatSocket = new WebSocket(url);
        
        chatSocket.onmessage = function(e) {
            const data = JSON.parse(e.data);
            console.log(data);

			if (data.type === 'chat_message') {
				let messages = document.getElementById('messages');
				messages.insertAdjacentHTML('beforeend', '<p>' + data.message + '</p>');
            };
	    };
		
        let form = document.getElementById('form');
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            let messageInput = document.getElementById('message');
            let message = messageInput.value;
            chatSocket.send(JSON.stringify({
                'message': message
            }));
            form.reset();
        });
    </script>
</body>
</html>
./backend/livechat/views.py
from django.shortcuts import render

# Create your views here.
def lobby(request):
	return render(request, 'livechat/lobby.html')./backend/livechat/urls.py
from django.urls import path
from . import views

urlpatterns = [
	path('', views.lobby)
]./backend/transcendence/views.py
from django.shortcuts import render
import os

#index Single Page Application
def index(request):
    return render(request, 'index.html')

def home_view(request):
    return render(request, 'home.html')
./backend/transcendence/urls.py
from django.contrib import admin
from django.urls import path, include, re_path
from django.views.generic import TemplateView
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),

    # SPA catch-all route to serve index.html
    re_path(r'^.*$', TemplateView.as_view(template_name='index.html'), name='app'),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
